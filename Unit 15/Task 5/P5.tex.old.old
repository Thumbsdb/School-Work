\documentclass{article}
\usepackage{graphicx}
\usepackage{hyperref}
\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=cyan,
    pdftitle={Overleaf Example},
    pdfpagemode=FullScreen,
}
\usepackage{titlesec}
\usepackage{geometry}
 \geometry{
 a4paper,
 total={170mm,257mm},
 left=20mm,
 top=20mm,
 }

\title{Unit 15 M2}
\author{Chris}
\date{}

\begin{document}

Build \& test a prototype – P5
You are required to understand different ways that a prototype can be produced using bespoke
software for game development.

You are required to build a prototype for the game concept, whole demonstrating demonstrate
these programming techniques: variables/constant

\underline{strings} are traditionally a sequence of characters. How is it used in our games is in the 
\underline{inputs} is any information or data sent to a computer for processing is considered input. Input or user input is sent to a computer using input device. 
Input device examples
\begin{enumerate}
	\item Keyboard
	\item Mouse
	\item Microphone
	\item Webcam
\end{enumerate}
. Hardware inputs are from the plays. It's commonly includes key presses, mouse clicks, mouse movement, controller button presses or joystick movement.
\underline{outputs}
Output devices allow users to better interact with computer equipment. They convert data signals into things that people can better understand, such as images or sounds. This means that users can utilize these devices to manipulate data into the most appropriate form for a given situation. This can increase the accessibility of the data and the user's or audience's ability to remember it accurately.
Output devices
\begin{enumerate}
	\item Braille reader
	\item Computer speakers
	\item GPS
	\item Headphones
\end{enumerate}
\underline{sequence} the sequence in the game 
\underline{selection} the selection 
\underline{iteration} the prototype is going to use iteration to make the game more to make the prototype more quickly and meet our clients requirements. iteration is the process by which a video game is repeatedly proposed, prototypes, play tested and reevaluated prior to working product release.
\underline{subroutines} is a collection of public static methods that makes it easier to manage conditional events and routines. 
\underline{conditions} in our game we have many if statements and conditions for example when your die, you loss your life and the health bar is set to 0. Another condition is when the player enter the hit box of the trap 5 kunai will spawn in 5 directions and 
\underline{counting} in our game we be using the counting to count how the score for our player.
\underline{totalling} in our game is the scoreboard and this done by keeping an integer that increase every time the player gets an item. 
In recent years, \underline{data structures} have shifted towards a data-oriented design that prioritizes high-performance computing. This approach is more attuned to CPU cache utilization and optimizes memory efficiency to fully leverage the capabilities of modern CPUs.
\underline{file handling} we don't 
\underline{maintainable code}
\underline{libraries} 







Your prototype could be a particular level or module of the full game concept. Evidence of the
prototype could be presented in the form of annotated screenshots or as a video of a working
prototype, or the prototype itself.
You are also required to plan and carry out testing of their prototype. Testing must be thorough
enough to prove the prototype is functional and meets requirements. Classic testing techniques
include:

test plans
\section{test data}
The test data for the game will be    
\begin{enumerate}
	\item Testing the hud
	\item Testing the items work
	\item Testing the levels that they can transfer
	\item Collision works
	\item Falling platform works
	\item Moving platform
\end{enumerate}

\section{black box}
The box testing takes advantage of extensive knowledge of an application’s internals to develop highly-targeted test cases. Examples of tests that might be performed during white box testing includeWhat is black box testing is a method of software testing that examines the functionality of an application without peering into its internal structures or workings. This method of test can be applied virtually to every level of software testing: unit, integration, system and acceptance. Black-box testing is also used as a method in penetration testing, where an ethical hacker simulates an external hacking or cyber warfare attack with no knowledge of the system being attacked. 

Black box testing involves testing a system with no prior knowledge of its internal workings. A tester provides an input, and observes the output generated by the system under test. This makes it possible to identify how the system responds to expected and unexpected user actions, its response time, usability issues and reliability issues.

Advantages of Black Box Testing

The tester does not need to have more functional knowledge or programming skills to implement the Black Box Testing.
It is efficient for implementing the tests in the larger system.
Tests are executed from the user’s or client’s point of view.
Test cases are easily reproducible.
It is used to find the ambiguity and contradictions in the functional specifications.

Disadvantages of Black Box Testing

There is a possibility of repeating the same tests while implementing the testing process.
Without clear functional specifications, test cases are difficult to implement.
It is difficult to execute the test cases because of complex inputs at different stages of testing.
Sometimes, the reason for the test failure cannot be detected.
Some programs in the application are not tested.
It does not reveal the errors in the control structure.
Working with a large sample space of inputs can be exhaustive and consumes a lot of time.


\section{white box}
White box testing takes advantage of extensive knowledge of an application’s internals to develop highly-targeted test cases. Examples of tests that might be performed during white box testing include

\begin{enumerate}
	\item Unit Testing
	\item Integration Testing
	\item Regression Testing
\end{enumerate}

\section{alpha}
\section{beta}
\section{user testing}
All this work must be in your own words \& provide a comprehensive record of the development
and testing of your prototype.
16
It is important that you correctly reference all sources used, following appropriate conventions.

\end{document}
